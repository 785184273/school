<html>
	<head>
		<meta charset = "utf-8"/>
	</head>
		<body>
			<form action = "?id = 5" method = "POST">
				<input type = "text" name = "a1"/>
				<input type = "text" name = "a2"/>
				<input type = "submit"  value = "提交"/>	
			</form>
			<?php
				$a = 10;
				$b = &$a;
				echo $b;
				echo "<hr>";
				$s1 = 'abc';
				$abc = 10;
				echo "<br/>".$$s1;
				if(!empty($_REQUEST))
				{
					print_r($_REQUEST);
				}
				echo "<pre>";
					print_r($_SERVER);
				echo "</pre>";
				
			?>
		</body>
</html>
<!--
变量
	基本理解
		变量可以理解为只是一个代表一定存储空间及其中数据的一个"标识符"--也就是一个名字
		使用形式：变量必须以$开头，后面紧跟变量名
		定义形式：php中不支持"单纯定义"一个变量，而是在第一次一个变量赋值的时候，就算是定义变量
	变量的基本操作
		只有四个操作
		赋值：等号(=)的左边放变量名，右边放数据，就是赋值
		取值：任何需要一个数据的语句中使用一个变量，此时就是指从该变量取得该变量的值--取值
		判断:isset()
				作用：判断该变量是否存在，或该变量是否存在数据，存在就是true 不存在就是false
		删除:unset()
				含义：删除一个变量并不是将该变量从程序中删掉，而是，断开该变量名跟该变量原有的数据之间的引用关系(联系)
					1,该变量名已经不指向（引用）任何数据了，则此时其isset（）判断的结果就是false
					2,该数据可能没有任何变量指向它了，就成为无法使用的数据，通常将会自动收回
	变量的命名规则
		基本规则--保证程序的正确性
			以字母下划线开头，后面跟任意数量(含0个)的字母，数字下划线
		行业规则--保证程序的可读性
	变量的传值方式
		变量的传值方式：是指一个变量传给另一个变量的内部细节形式--单对单
		变量的传值方式只有2种：值传递，引用传递
		值传递
			例如：$a = 1;
				$b = $a; //这就是值传递
				简单理解，将$a的值取出来，然后再用该值给$b赋值，值传递就是将$a的值进行复制，然后再给另一个变量$b赋值
					注意：1.这两个变量此时是相等的
						  2.这两个变量又是互相独立的--互不影响
		引用传递
			php中只有一种语法形式可以实现变量的引用传值方式：&符号。
			例如：$m1 = 1;
				$m2 = &$m1;  //引用传值
					简单理解：将变量$m1跟其数据值之间的"引用关系"，赋值一份，再给与变量$m2,此时变量$m2也同样具有跟原来数据一样的引用关系
					注意：1.此时任然有两个变量，但只有一个数据值，两个变量都共同指向该数据空间
						  2.对其中任何一个变量的操作，其实都是在操作数据值
	可变变量
		所谓可变变量其实就是变量的名字是可以动态变化以获取不同的数据值
				$s1 = "abc";
				$abc = 10;
				echo $$s1;  输出10
			理解： 在php中，一个$符号后，总是跟着一个变量名
					这里echo输出的这个变量（以第一个$为标识）的名字是：$s1即"abc"
					所以这里输出的就是$abc,既是10
					这种连续出现$符号的变量形式就是可变变量
	预定义变量
		所谓预定义变量，其实指php这个语言工具中，预先定义好的变量，我们只是拿来使用
			综述
			主要有：$_POST,$_GET,$_REQUEST,$_SERVER,$GLOBALS
			均是数组
			系统定义与维护的——即我们不应该给其赋值或销毁其值，只应该去用其值
			具有超全作用域———哪里都可以使用
			不同情形下可能具有不同的值
		$_POST变量
			含义：他代表用户通过表单POST方式提交的时候所提交的所有数据--称为POST数据
			isset()：判断变量是否存在，或变量是否为空，如果存在就是true，否则就是false
			empty(): 判断变量的内容是否为空(不是null，而是没有内容)，基本上，是一些硬性规定
					如下数据都是'空的'：0 falss null array()数组为空
		$_GET变量
			含义：它代表用户通过get方式提交的时候所提交的所有数据--称为get数据
			提交get数据有4种形式
				形式1：
				<form method  = "get" action = "">
				</form>
					这种形式的get数据，跟post数据类似，数据内容由用户填写或选择而得到
				形式2：
				<a href= "目标文件.php? date1 = 5&date2 = cctv">链接文字</a>
					说明：1.它只是一个链接而已，只是在链接文件名的后面加上"?"，然后一个个的"串接数据"
						  2.数据形式为：数据项名称=数据值，相互之间用"&"符号隔开
						  3.这种形式的数据也同样是"点击链接"就提交的get数据，但用户只能选择点或者不点，而不能修改数据
				形式3：
				<script>
					location.href = "目标文件.php? date1 = 5&date2 = cctv";
				</script>
					说明：1.该语句可以看做是通过js技术实现的页面跳转功能，跟a标签的链接功能完全一样
						  2.其中该语句，通常都是放在一个函数中，然后因为某个事件发生而去调用该函数
				形式4：
				<script>
					location.assign("目标文件.php? date1 = 5&date2 = cctv");
				</script>
					说明：该语句其实跟形式3安全一样功能，只是location这个对象实现页面跳转的另一种形式而已。
				不管哪种的形式的get数据提交，接收get数据，都只有一种形式，跟POST类似
					$v1 = $_POST['数据项名称'];
		$_REQUEST变量
			含义：他是$_get变量和$_post变量数据的“合集”：即，他里面同时存储了这两种数据
				怎么能同时具有get和post数据呢？
					只有一种方式
					<form action = "mysql.php?id = 5" method = "POST">
						<input type = "text" name = "a1"/>
						<input type = "text" name = "a2"/>
					</form>
		$_SERVER变量
			含义：它代表一次浏览网页的过程中的浏览器端的一些信息或服务器端的一些信息
				  我们只是在程序可以拿到这些信息，并用于变成所需！比如：取得用户的访问ip地址 
			注意：这种信息，随着不同的页面，和不同的服务器，以及不同的时刻，都有可能不同
			要求：
				大约有30个左右的信息，我们只要知道其中5个左右，主要有：
				$_SERVER['REMOTE_ADDR']:获取访问者的ip地址
				$_SERVER['SERVER_ADDR']：获取服务器所在的id地址
				$_SERVER['SERVER_NAME']：获取服务器的名字，其实就是站点设置中的servername
				$_SERVER['DOCUMENT_ROOT']：获取站点的真实物理地址，其实就是站点设置中的documentroot
				$_SERVER['PHP_SELF']：获取当前网页地址（不含域名部分）
				$_SERVER['SCRIP_FILENAME']：获取当前网页地址物理路径
				$_SERVER['QUERY_STRING']:获取当前网页地址中的所有get数据（就是？后面部分），但只是一个整体的字符串而已
		$GLOBALS变量
			含义：它也是一个"重复性数据"，它里面存储了我们自己定义的所有全局变量
			举例：$v1 = 1  //定义了一个全局变量
				此时就有了这样的一个数据：$GLOBALS['v1'],其值就是1
				
				
-->