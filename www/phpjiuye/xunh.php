<meta charset = "utf-8"/>
<?php
	$a = 1;
	if($a > 0 )
		echo "shabi";
	else
		echo "nimabi";
	echo "<hr>";
	echo "yoyoyo";
	echo "当前时间：".Date("ymd h:i:s");
	sleep(3);
	echo "当前时间：".Date("ymd h:i:s");
	echo "切克闹";
	die("终止!");
	//return;
	//exit("终止!");
	echo "你是傻逼我知道";
?>
<!--
	流程控制
		循环结构
		循环的中断
			break：用于完全终止某个循环，让执行流程进入到循环语句后面的语句
			continue：用于停止当前正在进行的当次循环，而进入到循环的”下一次“过程中去
	在php中，该两个循环有更强的能力：终端'更多层'的循环
		比如  break 正整数 n；	1.2.3
			  continue 正整数 n： 1.2.3
			 循环的层，指的是从当前中断语句算起，往代码的'外部'数循环的个数，就是层数
			 for()	//循环1
			 {
				 for()	//循环2
				 {
					for()	//循环3
					{
						 break 2; //此时会中断2，其实指中断'2层'
						 //对此break语句，循环3是其'第一层',循环2是第二层,循环1是第三次
					}
					continue 2;	//此时会中断循环1，其实是指第一层
								//对此continue语句，循环2是其第一层，循环1是其第2层
				 }
			 }
	流程控制的替代语法
		if() ......else........
	goto语句
		语法形式
		goto 标识符1；
		 语句....
	标识符1:
		 语句....
	控制脚本执行顺序
		die(字符串)/exit(字符串)
		输出该字符串后，立即停止php的运行，即后续程序不再执行，包括后续的其他所有php和html代码部分
	sleep(sn)
		让程序停止运行指定的描述,然后等待过了那个时间后，就继续运行
		注意：单位是秒
		
-->